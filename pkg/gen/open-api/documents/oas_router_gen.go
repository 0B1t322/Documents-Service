// Code generated by ogen, DO NOT EDIT.

package documents

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/documents/v1/documents"
			if l := len("/api/documents/v1/documents"); len(elem) >= l && elem[0:l] == "/api/documents/v1/documents" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "GET":
					s.handleGetDocumentsRequest([0]string{}, elemIsEscaped, w, r)
				case "POST":
					s.handleCreateDocumentRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "GET,POST")
				}

				return
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetDocumentByIdRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "PUT":
						s.handleUpdateDocumentByIdRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "elements"
						if l := len("elements"); len(elem) >= l && elem[0:l] == "elements" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetElementsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateElementRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "seId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteStructuralElementByIDRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetParagraphElementsRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateStructuralElementRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "element/paragraphs"
									if l := len("element/paragraphs"); len(elem) >= l && elem[0:l] == "element/paragraphs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleCreateParagraphElementRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "elementId"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleDeleteParagraphElementRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handleUpdateParagraphElementRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,PUT")
											}

											return
										}
									}
								case 'p': // Prefix: "paragraphs/elements/"
									if l := len("paragraphs/elements/"); len(elem) >= l && elem[0:l] == "paragraphs/elements/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "paragraphElementIndex"
									// Leaf parameter
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetParagraphElementByIndexesRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpdateParagraphElementByIndexesRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,PUT")
										}

										return
									}
								}
							}
						}
					case 's': // Prefix: "styles"
						if l := len("styles"); len(elem) >= l && elem[0:l] == "styles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetDocumentStylesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateDocumentStyleRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "styleId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteStyleByIdRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateStyleByIdRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/documents/v1/documents"
			if l := len("/api/documents/v1/documents"); len(elem) >= l && elem[0:l] == "/api/documents/v1/documents" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "GET":
					r.name = "GetDocuments"
					r.operationID = "getDocuments"
					r.pathPattern = "/api/documents/v1/documents"
					r.args = args
					r.count = 0
					return r, true
				case "POST":
					r.name = "CreateDocument"
					r.operationID = "createDocument"
					r.pathPattern = "/api/documents/v1/documents"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case '/': // Prefix: "/"
				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetDocumentById"
						r.operationID = "getDocumentById"
						r.pathPattern = "/api/documents/v1/documents/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "PUT":
						r.name = "UpdateDocumentById"
						r.operationID = "updateDocumentById"
						r.pathPattern = "/api/documents/v1/documents/{id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "elements"
						if l := len("elements"); len(elem) >= l && elem[0:l] == "elements" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetElements"
								r.operationID = "getElements"
								r.pathPattern = "/api/documents/v1/documents/{id}/elements"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = "CreateElement"
								r.operationID = "createElement"
								r.pathPattern = "/api/documents/v1/documents/{id}/elements"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "seId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteStructuralElementByID"
									r.operationID = "deleteStructuralElementByID"
									r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = "GetParagraphElements"
									r.operationID = "getParagraphElements"
									r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = "UpdateStructuralElement"
									r.operationID = "updateStructuralElement"
									r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "element/paragraphs"
									if l := len("element/paragraphs"); len(elem) >= l && elem[0:l] == "element/paragraphs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "CreateParagraphElement"
											r.operationID = "createParagraphElement"
											r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}/element/paragraphs"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "elementId"
										// Leaf parameter
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "DELETE":
												// Leaf: DeleteParagraphElement
												r.name = "DeleteParagraphElement"
												r.operationID = "deleteParagraphElement"
												r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}/element/paragraphs/{elementId}"
												r.args = args
												r.count = 3
												return r, true
											case "PUT":
												// Leaf: UpdateParagraphElement
												r.name = "UpdateParagraphElement"
												r.operationID = "updateParagraphElement"
												r.pathPattern = "/api/documents/v1/documents/{id}/elements/{seId}/element/paragraphs/{elementId}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}
									}
								case 'p': // Prefix: "paragraphs/elements/"
									if l := len("paragraphs/elements/"); len(elem) >= l && elem[0:l] == "paragraphs/elements/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "paragraphElementIndex"
									// Leaf parameter
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: GetParagraphElementByIndexes
											r.name = "GetParagraphElementByIndexes"
											r.operationID = "getParagraphElementByIndexes"
											r.pathPattern = "/api/documents/v1/documents/{id}/elements/{structuralElementIndex}/paragraphs/elements/{paragraphElementIndex}"
											r.args = args
											r.count = 3
											return r, true
										case "PUT":
											// Leaf: UpdateParagraphElementByIndexes
											r.name = "UpdateParagraphElementByIndexes"
											r.operationID = "updateParagraphElementByIndexes"
											r.pathPattern = "/api/documents/v1/documents/{id}/elements/{structuralElementIndex}/paragraphs/elements/{paragraphElementIndex}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					case 's': // Prefix: "styles"
						if l := len("styles"); len(elem) >= l && elem[0:l] == "styles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetDocumentStyles"
								r.operationID = "getDocumentStyles"
								r.pathPattern = "/api/documents/v1/documents/{id}/styles"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = "CreateDocumentStyle"
								r.operationID = "createDocumentStyle"
								r.pathPattern = "/api/documents/v1/documents/{id}/styles"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "styleId"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: DeleteStyleById
									r.name = "DeleteStyleById"
									r.operationID = "deleteStyleById"
									r.pathPattern = "/api/documents/v1/documents/{id}/styles/{styleId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									// Leaf: UpdateStyleById
									r.name = "UpdateStyleById"
									r.operationID = "updateStyleById"
									r.pathPattern = "/api/documents/v1/documents/{id}/styles/{styleId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
