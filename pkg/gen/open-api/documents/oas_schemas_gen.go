// Code generated by ogen, DO NOT EDIT.

package documents

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Alignment
type Alignment string

const (
	AlignmentStart     Alignment = "start"
	AlignmentCenter    Alignment = "center"
	AlignmentEnd       Alignment = "end"
	AlignmentJustified Alignment = "justified"
)

// MarshalText implements encoding.TextMarshaler.
func (s Alignment) MarshalText() ([]byte, error) {
	switch s {
	case AlignmentStart:
		return []byte(s), nil
	case AlignmentCenter:
		return []byte(s), nil
	case AlignmentEnd:
		return []byte(s), nil
	case AlignmentJustified:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Alignment) UnmarshalText(data []byte) error {
	switch Alignment(data) {
	case AlignmentStart:
		*s = AlignmentStart
		return nil
	case AlignmentCenter:
		*s = AlignmentCenter
		return nil
	case AlignmentEnd:
		*s = AlignmentEnd
		return nil
	case AlignmentJustified:
		*s = AlignmentJustified
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Body
type Body struct {
	ID uuid.UUID `json:"id"`
}

// GetID returns the value of ID.
func (s *Body) GetID() uuid.UUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *Body) SetID(val uuid.UUID) {
	s.ID = val
}

// Ref: #/components/schemas/Color
type Color struct {
	Red   float64 `json:"red"`
	Blue  float64 `json:"blue"`
	Green float64 `json:"green"`
}

// GetRed returns the value of Red.
func (s *Color) GetRed() float64 {
	return s.Red
}

// GetBlue returns the value of Blue.
func (s *Color) GetBlue() float64 {
	return s.Blue
}

// GetGreen returns the value of Green.
func (s *Color) GetGreen() float64 {
	return s.Green
}

// SetRed sets the value of Red.
func (s *Color) SetRed(val float64) {
	s.Red = val
}

// SetBlue sets the value of Blue.
func (s *Color) SetBlue(val float64) {
	s.Blue = val
}

// SetGreen sets the value of Green.
func (s *Color) SetGreen(val float64) {
	s.Green = val
}

// Ref: #/components/schemas/CompactDocument
type CompactDocument struct {
	ID    uuid.UUID `json:"id"`
	Title string    `json:"title"`
}

// GetID returns the value of ID.
func (s *CompactDocument) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *CompactDocument) GetTitle() string {
	return s.Title
}

// SetID sets the value of ID.
func (s *CompactDocument) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *CompactDocument) SetTitle(val string) {
	s.Title = val
}

// Ref: #/components/schemas/CreateUpdateDocumentView
type CreateUpdateDocumentView struct {
	Title string `json:"title"`
	Size  Size   `json:"size"`
}

// GetTitle returns the value of Title.
func (s *CreateUpdateDocumentView) GetTitle() string {
	return s.Title
}

// GetSize returns the value of Size.
func (s *CreateUpdateDocumentView) GetSize() Size {
	return s.Size
}

// SetTitle sets the value of Title.
func (s *CreateUpdateDocumentView) SetTitle(val string) {
	s.Title = val
}

// SetSize sets the value of Size.
func (s *CreateUpdateDocumentView) SetSize(val Size) {
	s.Size = val
}

// Ref: #/components/schemas/CreateUpdateParagraph
type CreateUpdateParagraph struct {
	ParagraphStyleId NilInt `json:"paragraphStyleId"`
}

// GetParagraphStyleId returns the value of ParagraphStyleId.
func (s *CreateUpdateParagraph) GetParagraphStyleId() NilInt {
	return s.ParagraphStyleId
}

// SetParagraphStyleId sets the value of ParagraphStyleId.
func (s *CreateUpdateParagraph) SetParagraphStyleId(val NilInt) {
	s.ParagraphStyleId = val
}

// Ref: #/components/schemas/CreateUpdateParagraphElement
type CreateUpdateParagraphElement struct {
	Element CreateUpdateParagraphElementElement `json:"element"`
	Index   int                                 `json:"index"`
}

// GetElement returns the value of Element.
func (s *CreateUpdateParagraphElement) GetElement() CreateUpdateParagraphElementElement {
	return s.Element
}

// GetIndex returns the value of Index.
func (s *CreateUpdateParagraphElement) GetIndex() int {
	return s.Index
}

// SetElement sets the value of Element.
func (s *CreateUpdateParagraphElement) SetElement(val CreateUpdateParagraphElementElement) {
	s.Element = val
}

// SetIndex sets the value of Index.
func (s *CreateUpdateParagraphElement) SetIndex(val int) {
	s.Index = val
}

// CreateUpdateParagraphElementElement represents sum type.
type CreateUpdateParagraphElementElement struct {
	Type                CreateUpdateParagraphElementElementType // switch on this field
	CreateUpdateTextRun CreateUpdateTextRun
}

// CreateUpdateParagraphElementElementType is oneOf type of CreateUpdateParagraphElementElement.
type CreateUpdateParagraphElementElementType string

// Possible values for CreateUpdateParagraphElementElementType.
const (
	CreateUpdateTextRunCreateUpdateParagraphElementElement CreateUpdateParagraphElementElementType = "CreateUpdateTextRun"
)

// IsCreateUpdateTextRun reports whether CreateUpdateParagraphElementElement is CreateUpdateTextRun.
func (s CreateUpdateParagraphElementElement) IsCreateUpdateTextRun() bool {
	return s.Type == CreateUpdateTextRunCreateUpdateParagraphElementElement
}

// SetCreateUpdateTextRun sets CreateUpdateParagraphElementElement to CreateUpdateTextRun.
func (s *CreateUpdateParagraphElementElement) SetCreateUpdateTextRun(v CreateUpdateTextRun) {
	s.Type = CreateUpdateTextRunCreateUpdateParagraphElementElement
	s.CreateUpdateTextRun = v
}

// GetCreateUpdateTextRun returns CreateUpdateTextRun and true boolean if CreateUpdateParagraphElementElement is CreateUpdateTextRun.
func (s CreateUpdateParagraphElementElement) GetCreateUpdateTextRun() (v CreateUpdateTextRun, ok bool) {
	if !s.IsCreateUpdateTextRun() {
		return v, false
	}
	return s.CreateUpdateTextRun, true
}

// NewCreateUpdateTextRunCreateUpdateParagraphElementElement returns new CreateUpdateParagraphElementElement from CreateUpdateTextRun.
func NewCreateUpdateTextRunCreateUpdateParagraphElementElement(v CreateUpdateTextRun) CreateUpdateParagraphElementElement {
	var s CreateUpdateParagraphElementElement
	s.SetCreateUpdateTextRun(v)
	return s
}

// Ref: #/components/schemas/CreateUpdateParagraphStyle
type CreateUpdateParagraphStyle struct {
	Alignment   Alignment `json:"alignment"`
	LineSpacing int       `json:"lineSpacing"`
}

// GetAlignment returns the value of Alignment.
func (s *CreateUpdateParagraphStyle) GetAlignment() Alignment {
	return s.Alignment
}

// GetLineSpacing returns the value of LineSpacing.
func (s *CreateUpdateParagraphStyle) GetLineSpacing() int {
	return s.LineSpacing
}

// SetAlignment sets the value of Alignment.
func (s *CreateUpdateParagraphStyle) SetAlignment(val Alignment) {
	s.Alignment = val
}

// SetLineSpacing sets the value of LineSpacing.
func (s *CreateUpdateParagraphStyle) SetLineSpacing(val int) {
	s.LineSpacing = val
}

// Ref: #/components/schemas/CreateUpdateSectionBreak
type CreateUpdateSectionBreak struct {
	SectionBreakStyleId NilInt `json:"sectionBreakStyleId"`
}

// GetSectionBreakStyleId returns the value of SectionBreakStyleId.
func (s *CreateUpdateSectionBreak) GetSectionBreakStyleId() NilInt {
	return s.SectionBreakStyleId
}

// SetSectionBreakStyleId sets the value of SectionBreakStyleId.
func (s *CreateUpdateSectionBreak) SetSectionBreakStyleId(val NilInt) {
	s.SectionBreakStyleId = val
}

// Ref: #/components/schemas/CreateUpdateStructuralElement
type CreateUpdateStructuralElement struct {
	Index   int                                  `json:"index"`
	Element CreateUpdateStructuralElementElement `json:"element"`
}

// GetIndex returns the value of Index.
func (s *CreateUpdateStructuralElement) GetIndex() int {
	return s.Index
}

// GetElement returns the value of Element.
func (s *CreateUpdateStructuralElement) GetElement() CreateUpdateStructuralElementElement {
	return s.Element
}

// SetIndex sets the value of Index.
func (s *CreateUpdateStructuralElement) SetIndex(val int) {
	s.Index = val
}

// SetElement sets the value of Element.
func (s *CreateUpdateStructuralElement) SetElement(val CreateUpdateStructuralElementElement) {
	s.Element = val
}

// CreateUpdateStructuralElementElement represents sum type.
type CreateUpdateStructuralElementElement struct {
	Type                     CreateUpdateStructuralElementElementType // switch on this field
	CreateUpdateParagraph    CreateUpdateParagraph
	CreateUpdateSectionBreak CreateUpdateSectionBreak
}

// CreateUpdateStructuralElementElementType is oneOf type of CreateUpdateStructuralElementElement.
type CreateUpdateStructuralElementElementType string

// Possible values for CreateUpdateStructuralElementElementType.
const (
	CreateUpdateParagraphCreateUpdateStructuralElementElement    CreateUpdateStructuralElementElementType = "CreateUpdateParagraph"
	CreateUpdateSectionBreakCreateUpdateStructuralElementElement CreateUpdateStructuralElementElementType = "CreateUpdateSectionBreak"
)

// IsCreateUpdateParagraph reports whether CreateUpdateStructuralElementElement is CreateUpdateParagraph.
func (s CreateUpdateStructuralElementElement) IsCreateUpdateParagraph() bool {
	return s.Type == CreateUpdateParagraphCreateUpdateStructuralElementElement
}

// IsCreateUpdateSectionBreak reports whether CreateUpdateStructuralElementElement is CreateUpdateSectionBreak.
func (s CreateUpdateStructuralElementElement) IsCreateUpdateSectionBreak() bool {
	return s.Type == CreateUpdateSectionBreakCreateUpdateStructuralElementElement
}

// SetCreateUpdateParagraph sets CreateUpdateStructuralElementElement to CreateUpdateParagraph.
func (s *CreateUpdateStructuralElementElement) SetCreateUpdateParagraph(v CreateUpdateParagraph) {
	s.Type = CreateUpdateParagraphCreateUpdateStructuralElementElement
	s.CreateUpdateParagraph = v
}

// GetCreateUpdateParagraph returns CreateUpdateParagraph and true boolean if CreateUpdateStructuralElementElement is CreateUpdateParagraph.
func (s CreateUpdateStructuralElementElement) GetCreateUpdateParagraph() (v CreateUpdateParagraph, ok bool) {
	if !s.IsCreateUpdateParagraph() {
		return v, false
	}
	return s.CreateUpdateParagraph, true
}

// NewCreateUpdateParagraphCreateUpdateStructuralElementElement returns new CreateUpdateStructuralElementElement from CreateUpdateParagraph.
func NewCreateUpdateParagraphCreateUpdateStructuralElementElement(v CreateUpdateParagraph) CreateUpdateStructuralElementElement {
	var s CreateUpdateStructuralElementElement
	s.SetCreateUpdateParagraph(v)
	return s
}

// SetCreateUpdateSectionBreak sets CreateUpdateStructuralElementElement to CreateUpdateSectionBreak.
func (s *CreateUpdateStructuralElementElement) SetCreateUpdateSectionBreak(v CreateUpdateSectionBreak) {
	s.Type = CreateUpdateSectionBreakCreateUpdateStructuralElementElement
	s.CreateUpdateSectionBreak = v
}

// GetCreateUpdateSectionBreak returns CreateUpdateSectionBreak and true boolean if CreateUpdateStructuralElementElement is CreateUpdateSectionBreak.
func (s CreateUpdateStructuralElementElement) GetCreateUpdateSectionBreak() (v CreateUpdateSectionBreak, ok bool) {
	if !s.IsCreateUpdateSectionBreak() {
		return v, false
	}
	return s.CreateUpdateSectionBreak, true
}

// NewCreateUpdateSectionBreakCreateUpdateStructuralElementElement returns new CreateUpdateStructuralElementElement from CreateUpdateSectionBreak.
func NewCreateUpdateSectionBreakCreateUpdateStructuralElementElement(v CreateUpdateSectionBreak) CreateUpdateStructuralElementElement {
	var s CreateUpdateStructuralElementElement
	s.SetCreateUpdateSectionBreak(v)
	return s
}

// Ref: #/components/schemas/CreateUpdateStyle
type CreateUpdateStyle struct {
	Name           string                     `json:"name"`
	ParagraphStyle CreateUpdateParagraphStyle `json:"paragraphStyle"`
	TextStyle      CreateUpdateTextStyle      `json:"textStyle"`
}

// GetName returns the value of Name.
func (s *CreateUpdateStyle) GetName() string {
	return s.Name
}

// GetParagraphStyle returns the value of ParagraphStyle.
func (s *CreateUpdateStyle) GetParagraphStyle() CreateUpdateParagraphStyle {
	return s.ParagraphStyle
}

// GetTextStyle returns the value of TextStyle.
func (s *CreateUpdateStyle) GetTextStyle() CreateUpdateTextStyle {
	return s.TextStyle
}

// SetName sets the value of Name.
func (s *CreateUpdateStyle) SetName(val string) {
	s.Name = val
}

// SetParagraphStyle sets the value of ParagraphStyle.
func (s *CreateUpdateStyle) SetParagraphStyle(val CreateUpdateParagraphStyle) {
	s.ParagraphStyle = val
}

// SetTextStyle sets the value of TextStyle.
func (s *CreateUpdateStyle) SetTextStyle(val CreateUpdateTextStyle) {
	s.TextStyle = val
}

// Ref: #/components/schemas/CreateUpdateTextRun
type CreateUpdateTextRun struct {
	Content     string `json:"content"`
	TextStyleId int    `json:"textStyleId"`
}

// GetContent returns the value of Content.
func (s *CreateUpdateTextRun) GetContent() string {
	return s.Content
}

// GetTextStyleId returns the value of TextStyleId.
func (s *CreateUpdateTextRun) GetTextStyleId() int {
	return s.TextStyleId
}

// SetContent sets the value of Content.
func (s *CreateUpdateTextRun) SetContent(val string) {
	s.Content = val
}

// SetTextStyleId sets the value of TextStyleId.
func (s *CreateUpdateTextRun) SetTextStyleId(val int) {
	s.TextStyleId = val
}

// Ref: #/components/schemas/CreateUpdateTextStyle
type CreateUpdateTextStyle struct {
	FontFamily      string    `json:"fontFamily"`
	FontWeight      int       `json:"fontWeight"`
	FontSize        Dimension `json:"fontSize"`
	Bold            bool      `json:"bold"`
	Underline       bool      `json:"underline"`
	Italic          bool      `json:"italic"`
	BackgroundColor Color     `json:"backgroundColor"`
	ForegroundColor Color     `json:"foregroundColor"`
}

// GetFontFamily returns the value of FontFamily.
func (s *CreateUpdateTextStyle) GetFontFamily() string {
	return s.FontFamily
}

// GetFontWeight returns the value of FontWeight.
func (s *CreateUpdateTextStyle) GetFontWeight() int {
	return s.FontWeight
}

// GetFontSize returns the value of FontSize.
func (s *CreateUpdateTextStyle) GetFontSize() Dimension {
	return s.FontSize
}

// GetBold returns the value of Bold.
func (s *CreateUpdateTextStyle) GetBold() bool {
	return s.Bold
}

// GetUnderline returns the value of Underline.
func (s *CreateUpdateTextStyle) GetUnderline() bool {
	return s.Underline
}

// GetItalic returns the value of Italic.
func (s *CreateUpdateTextStyle) GetItalic() bool {
	return s.Italic
}

// GetBackgroundColor returns the value of BackgroundColor.
func (s *CreateUpdateTextStyle) GetBackgroundColor() Color {
	return s.BackgroundColor
}

// GetForegroundColor returns the value of ForegroundColor.
func (s *CreateUpdateTextStyle) GetForegroundColor() Color {
	return s.ForegroundColor
}

// SetFontFamily sets the value of FontFamily.
func (s *CreateUpdateTextStyle) SetFontFamily(val string) {
	s.FontFamily = val
}

// SetFontWeight sets the value of FontWeight.
func (s *CreateUpdateTextStyle) SetFontWeight(val int) {
	s.FontWeight = val
}

// SetFontSize sets the value of FontSize.
func (s *CreateUpdateTextStyle) SetFontSize(val Dimension) {
	s.FontSize = val
}

// SetBold sets the value of Bold.
func (s *CreateUpdateTextStyle) SetBold(val bool) {
	s.Bold = val
}

// SetUnderline sets the value of Underline.
func (s *CreateUpdateTextStyle) SetUnderline(val bool) {
	s.Underline = val
}

// SetItalic sets the value of Italic.
func (s *CreateUpdateTextStyle) SetItalic(val bool) {
	s.Italic = val
}

// SetBackgroundColor sets the value of BackgroundColor.
func (s *CreateUpdateTextStyle) SetBackgroundColor(val Color) {
	s.BackgroundColor = val
}

// SetForegroundColor sets the value of ForegroundColor.
func (s *CreateUpdateTextStyle) SetForegroundColor(val Color) {
	s.ForegroundColor = val
}

// DeleteParagraphElementNoContent is response for DeleteParagraphElement operation.
type DeleteParagraphElementNoContent struct{}

func (*DeleteParagraphElementNoContent) deleteParagraphElementRes() {}

// DeleteStructuralElementByIDNoContent is response for DeleteStructuralElementByID operation.
type DeleteStructuralElementByIDNoContent struct{}

func (*DeleteStructuralElementByIDNoContent) deleteStructuralElementByIDRes() {}

// DeleteStyleByIdNoContent is response for DeleteStyleById operation.
type DeleteStyleByIdNoContent struct{}

func (*DeleteStyleByIdNoContent) deleteStyleByIdRes() {}

// Ref: #/components/schemas/Dimension
type Dimension struct {
	Magnitude float64 `json:"magnitude"`
	Unit      Unit    `json:"unit"`
}

// GetMagnitude returns the value of Magnitude.
func (s *Dimension) GetMagnitude() float64 {
	return s.Magnitude
}

// GetUnit returns the value of Unit.
func (s *Dimension) GetUnit() Unit {
	return s.Unit
}

// SetMagnitude sets the value of Magnitude.
func (s *Dimension) SetMagnitude(val float64) {
	s.Magnitude = val
}

// SetUnit sets the value of Unit.
func (s *Dimension) SetUnit(val Unit) {
	s.Unit = val
}

// Ref: #/components/schemas/Document
type Document struct {
	ID    uuid.UUID     `json:"id"`
	Title string        `json:"title"`
	Body  Body          `json:"body"`
	Style DocumentStyle `json:"style"`
}

// GetID returns the value of ID.
func (s *Document) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Document) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *Document) GetBody() Body {
	return s.Body
}

// GetStyle returns the value of Style.
func (s *Document) GetStyle() DocumentStyle {
	return s.Style
}

// SetID sets the value of ID.
func (s *Document) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Document) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *Document) SetBody(val Body) {
	s.Body = val
}

// SetStyle sets the value of Style.
func (s *Document) SetStyle(val DocumentStyle) {
	s.Style = val
}

func (*Document) createDocumentRes()     {}
func (*Document) getDocumentByIdRes()    {}
func (*Document) updateDocumentByIdRes() {}

// Ref: #/components/schemas/DocumentStyle
type DocumentStyle struct {
	ID   int  `json:"id"`
	Size Size `json:"size"`
}

// GetID returns the value of ID.
func (s *DocumentStyle) GetID() int {
	return s.ID
}

// GetSize returns the value of Size.
func (s *DocumentStyle) GetSize() Size {
	return s.Size
}

// SetID sets the value of ID.
func (s *DocumentStyle) SetID(val int) {
	s.ID = val
}

// SetSize sets the value of Size.
func (s *DocumentStyle) SetSize(val Size) {
	s.Size = val
}

type DocumentsIDStylesGetOKApplicationJSON []Style

func (*DocumentsIDStylesGetOKApplicationJSON) documentsIDStylesGetRes() {}

// Ref: #/components/schemas/Equation
type Equation struct {
	ID          int    `json:"id"`
	Content     string `json:"content"`
	TextStyleId int    `json:"textStyleId"`
}

// GetID returns the value of ID.
func (s *Equation) GetID() int {
	return s.ID
}

// GetContent returns the value of Content.
func (s *Equation) GetContent() string {
	return s.Content
}

// GetTextStyleId returns the value of TextStyleId.
func (s *Equation) GetTextStyleId() int {
	return s.TextStyleId
}

// SetID sets the value of ID.
func (s *Equation) SetID(val int) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *Equation) SetContent(val string) {
	s.Content = val
}

// SetTextStyleId sets the value of TextStyleId.
func (s *Equation) SetTextStyleId(val int) {
	s.TextStyleId = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// HTTP status code.
	Status int `json:"status"`
	// String message.
	Message string `json:"message"`
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() int {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val int) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) createDocumentRes()              {}
func (*ErrorStatusCode) createDocumentStyleRes()         {}
func (*ErrorStatusCode) createElementRes()               {}
func (*ErrorStatusCode) createParagraphElementRes()      {}
func (*ErrorStatusCode) deleteParagraphElementRes()      {}
func (*ErrorStatusCode) deleteStructuralElementByIDRes() {}
func (*ErrorStatusCode) deleteStyleByIdRes()             {}
func (*ErrorStatusCode) documentsGetRes()                {}
func (*ErrorStatusCode) documentsIDElementsSeIdGetRes()  {}
func (*ErrorStatusCode) documentsIDStylesGetRes()        {}
func (*ErrorStatusCode) getDocumentByIdRes()             {}
func (*ErrorStatusCode) getElementsRes()                 {}
func (*ErrorStatusCode) updateDocumentByIdRes()          {}
func (*ErrorStatusCode) updateParagraphElementRes()      {}
func (*ErrorStatusCode) updateStructuralElementRes()     {}
func (*ErrorStatusCode) updateStyleByIdRes()             {}

// Ref: #/components/schemas/InlineObjectElement
type InlineObjectElement struct {
	ID             int       `json:"id"`
	InlineObjectId uuid.UUID `json:"inlineObjectId"`
	TextStyleId    int       `json:"textStyleId"`
}

// GetID returns the value of ID.
func (s *InlineObjectElement) GetID() int {
	return s.ID
}

// GetInlineObjectId returns the value of InlineObjectId.
func (s *InlineObjectElement) GetInlineObjectId() uuid.UUID {
	return s.InlineObjectId
}

// GetTextStyleId returns the value of TextStyleId.
func (s *InlineObjectElement) GetTextStyleId() int {
	return s.TextStyleId
}

// SetID sets the value of ID.
func (s *InlineObjectElement) SetID(val int) {
	s.ID = val
}

// SetInlineObjectId sets the value of InlineObjectId.
func (s *InlineObjectElement) SetInlineObjectId(val uuid.UUID) {
	s.InlineObjectId = val
}

// SetTextStyleId sets the value of TextStyleId.
func (s *InlineObjectElement) SetTextStyleId(val int) {
	s.TextStyleId = val
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUint returns new OptUint with value set to v.
func NewOptUint(v uint) OptUint {
	return OptUint{
		Value: v,
		Set:   true,
	}
}

// OptUint is optional uint.
type OptUint struct {
	Value uint
	Set   bool
}

// IsSet returns true if OptUint was set.
func (o OptUint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUint) Reset() {
	var v uint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUint) SetTo(v uint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUint) Get() (v uint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUint) Or(d uint) uint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PageBreak
type PageBreak struct {
	ID          int `json:"id"`
	TextStyleId int `json:"textStyleId"`
}

// GetID returns the value of ID.
func (s *PageBreak) GetID() int {
	return s.ID
}

// GetTextStyleId returns the value of TextStyleId.
func (s *PageBreak) GetTextStyleId() int {
	return s.TextStyleId
}

// SetID sets the value of ID.
func (s *PageBreak) SetID(val int) {
	s.ID = val
}

// SetTextStyleId sets the value of TextStyleId.
func (s *PageBreak) SetTextStyleId(val int) {
	s.TextStyleId = val
}

// Ref: #/components/schemas/PaginatedDocuments
type PaginatedDocuments struct {
	Items  []CompactDocument `json:"items"`
	Cursor string            `json:"cursor"`
}

// GetItems returns the value of Items.
func (s *PaginatedDocuments) GetItems() []CompactDocument {
	return s.Items
}

// GetCursor returns the value of Cursor.
func (s *PaginatedDocuments) GetCursor() string {
	return s.Cursor
}

// SetItems sets the value of Items.
func (s *PaginatedDocuments) SetItems(val []CompactDocument) {
	s.Items = val
}

// SetCursor sets the value of Cursor.
func (s *PaginatedDocuments) SetCursor(val string) {
	s.Cursor = val
}

func (*PaginatedDocuments) documentsGetRes() {}

// Ref: #/components/schemas/PaginatedParagrahElements
type PaginatedParagrahElements struct {
	Items  []ParagraphElement `json:"items"`
	Cursor string             `json:"cursor"`
}

// GetItems returns the value of Items.
func (s *PaginatedParagrahElements) GetItems() []ParagraphElement {
	return s.Items
}

// GetCursor returns the value of Cursor.
func (s *PaginatedParagrahElements) GetCursor() string {
	return s.Cursor
}

// SetItems sets the value of Items.
func (s *PaginatedParagrahElements) SetItems(val []ParagraphElement) {
	s.Items = val
}

// SetCursor sets the value of Cursor.
func (s *PaginatedParagrahElements) SetCursor(val string) {
	s.Cursor = val
}

func (*PaginatedParagrahElements) documentsIDElementsSeIdGetRes() {}

// Ref: #/components/schemas/PaginatedStructuralElements
type PaginatedStructuralElements struct {
	Elements []StructuralElement `json:"elements"`
	Cursor   string              `json:"cursor"`
}

// GetElements returns the value of Elements.
func (s *PaginatedStructuralElements) GetElements() []StructuralElement {
	return s.Elements
}

// GetCursor returns the value of Cursor.
func (s *PaginatedStructuralElements) GetCursor() string {
	return s.Cursor
}

// SetElements sets the value of Elements.
func (s *PaginatedStructuralElements) SetElements(val []StructuralElement) {
	s.Elements = val
}

// SetCursor sets the value of Cursor.
func (s *PaginatedStructuralElements) SetCursor(val string) {
	s.Cursor = val
}

func (*PaginatedStructuralElements) getElementsRes() {}

// Ref: #/components/schemas/Paragraph
type Paragraph struct {
	ID               int    `json:"id"`
	ParagraphStyleId OptInt `json:"paragraphStyleId"`
}

// GetID returns the value of ID.
func (s *Paragraph) GetID() int {
	return s.ID
}

// GetParagraphStyleId returns the value of ParagraphStyleId.
func (s *Paragraph) GetParagraphStyleId() OptInt {
	return s.ParagraphStyleId
}

// SetID sets the value of ID.
func (s *Paragraph) SetID(val int) {
	s.ID = val
}

// SetParagraphStyleId sets the value of ParagraphStyleId.
func (s *Paragraph) SetParagraphStyleId(val OptInt) {
	s.ParagraphStyleId = val
}

// Ref: #/components/schemas/ParagraphElement
type ParagraphElement struct {
	ID      int                     `json:"id"`
	Index   int                     `json:"index"`
	Element ParagraphElementElement `json:"element"`
}

// GetID returns the value of ID.
func (s *ParagraphElement) GetID() int {
	return s.ID
}

// GetIndex returns the value of Index.
func (s *ParagraphElement) GetIndex() int {
	return s.Index
}

// GetElement returns the value of Element.
func (s *ParagraphElement) GetElement() ParagraphElementElement {
	return s.Element
}

// SetID sets the value of ID.
func (s *ParagraphElement) SetID(val int) {
	s.ID = val
}

// SetIndex sets the value of Index.
func (s *ParagraphElement) SetIndex(val int) {
	s.Index = val
}

// SetElement sets the value of Element.
func (s *ParagraphElement) SetElement(val ParagraphElementElement) {
	s.Element = val
}

func (*ParagraphElement) createParagraphElementRes() {}
func (*ParagraphElement) updateParagraphElementRes() {}

// ParagraphElementElement represents sum type.
type ParagraphElementElement struct {
	Type                ParagraphElementElementType // switch on this field
	TextRun             TextRun
	PageBreak           PageBreak
	Equation            Equation
	InlineObjectElement InlineObjectElement
}

// ParagraphElementElementType is oneOf type of ParagraphElementElement.
type ParagraphElementElementType string

// Possible values for ParagraphElementElementType.
const (
	TextRunParagraphElementElement             ParagraphElementElementType = "TextRun"
	PageBreakParagraphElementElement           ParagraphElementElementType = "PageBreak"
	EquationParagraphElementElement            ParagraphElementElementType = "Equation"
	InlineObjectElementParagraphElementElement ParagraphElementElementType = "InlineObjectElement"
)

// IsTextRun reports whether ParagraphElementElement is TextRun.
func (s ParagraphElementElement) IsTextRun() bool { return s.Type == TextRunParagraphElementElement }

// IsPageBreak reports whether ParagraphElementElement is PageBreak.
func (s ParagraphElementElement) IsPageBreak() bool {
	return s.Type == PageBreakParagraphElementElement
}

// IsEquation reports whether ParagraphElementElement is Equation.
func (s ParagraphElementElement) IsEquation() bool { return s.Type == EquationParagraphElementElement }

// IsInlineObjectElement reports whether ParagraphElementElement is InlineObjectElement.
func (s ParagraphElementElement) IsInlineObjectElement() bool {
	return s.Type == InlineObjectElementParagraphElementElement
}

// SetTextRun sets ParagraphElementElement to TextRun.
func (s *ParagraphElementElement) SetTextRun(v TextRun) {
	s.Type = TextRunParagraphElementElement
	s.TextRun = v
}

// GetTextRun returns TextRun and true boolean if ParagraphElementElement is TextRun.
func (s ParagraphElementElement) GetTextRun() (v TextRun, ok bool) {
	if !s.IsTextRun() {
		return v, false
	}
	return s.TextRun, true
}

// NewTextRunParagraphElementElement returns new ParagraphElementElement from TextRun.
func NewTextRunParagraphElementElement(v TextRun) ParagraphElementElement {
	var s ParagraphElementElement
	s.SetTextRun(v)
	return s
}

// SetPageBreak sets ParagraphElementElement to PageBreak.
func (s *ParagraphElementElement) SetPageBreak(v PageBreak) {
	s.Type = PageBreakParagraphElementElement
	s.PageBreak = v
}

// GetPageBreak returns PageBreak and true boolean if ParagraphElementElement is PageBreak.
func (s ParagraphElementElement) GetPageBreak() (v PageBreak, ok bool) {
	if !s.IsPageBreak() {
		return v, false
	}
	return s.PageBreak, true
}

// NewPageBreakParagraphElementElement returns new ParagraphElementElement from PageBreak.
func NewPageBreakParagraphElementElement(v PageBreak) ParagraphElementElement {
	var s ParagraphElementElement
	s.SetPageBreak(v)
	return s
}

// SetEquation sets ParagraphElementElement to Equation.
func (s *ParagraphElementElement) SetEquation(v Equation) {
	s.Type = EquationParagraphElementElement
	s.Equation = v
}

// GetEquation returns Equation and true boolean if ParagraphElementElement is Equation.
func (s ParagraphElementElement) GetEquation() (v Equation, ok bool) {
	if !s.IsEquation() {
		return v, false
	}
	return s.Equation, true
}

// NewEquationParagraphElementElement returns new ParagraphElementElement from Equation.
func NewEquationParagraphElementElement(v Equation) ParagraphElementElement {
	var s ParagraphElementElement
	s.SetEquation(v)
	return s
}

// SetInlineObjectElement sets ParagraphElementElement to InlineObjectElement.
func (s *ParagraphElementElement) SetInlineObjectElement(v InlineObjectElement) {
	s.Type = InlineObjectElementParagraphElementElement
	s.InlineObjectElement = v
}

// GetInlineObjectElement returns InlineObjectElement and true boolean if ParagraphElementElement is InlineObjectElement.
func (s ParagraphElementElement) GetInlineObjectElement() (v InlineObjectElement, ok bool) {
	if !s.IsInlineObjectElement() {
		return v, false
	}
	return s.InlineObjectElement, true
}

// NewInlineObjectElementParagraphElementElement returns new ParagraphElementElement from InlineObjectElement.
func NewInlineObjectElementParagraphElementElement(v InlineObjectElement) ParagraphElementElement {
	var s ParagraphElementElement
	s.SetInlineObjectElement(v)
	return s
}

// Ref: #/components/schemas/ParagraphElementType
type ParagraphElementType string

const (
	ParagraphElementTypeTextRun             ParagraphElementType = "textRun"
	ParagraphElementTypePageBreak           ParagraphElementType = "pageBreak"
	ParagraphElementTypeEquation            ParagraphElementType = "equation"
	ParagraphElementTypeInlineObjectElement ParagraphElementType = "inlineObjectElement"
)

// MarshalText implements encoding.TextMarshaler.
func (s ParagraphElementType) MarshalText() ([]byte, error) {
	switch s {
	case ParagraphElementTypeTextRun:
		return []byte(s), nil
	case ParagraphElementTypePageBreak:
		return []byte(s), nil
	case ParagraphElementTypeEquation:
		return []byte(s), nil
	case ParagraphElementTypeInlineObjectElement:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParagraphElementType) UnmarshalText(data []byte) error {
	switch ParagraphElementType(data) {
	case ParagraphElementTypeTextRun:
		*s = ParagraphElementTypeTextRun
		return nil
	case ParagraphElementTypePageBreak:
		*s = ParagraphElementTypePageBreak
		return nil
	case ParagraphElementTypeEquation:
		*s = ParagraphElementTypeEquation
		return nil
	case ParagraphElementTypeInlineObjectElement:
		*s = ParagraphElementTypeInlineObjectElement
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ParagraphStyle
type ParagraphStyle struct {
	ID          int       `json:"id"`
	Alignment   Alignment `json:"alignment"`
	LineSpacing int       `json:"lineSpacing"`
}

// GetID returns the value of ID.
func (s *ParagraphStyle) GetID() int {
	return s.ID
}

// GetAlignment returns the value of Alignment.
func (s *ParagraphStyle) GetAlignment() Alignment {
	return s.Alignment
}

// GetLineSpacing returns the value of LineSpacing.
func (s *ParagraphStyle) GetLineSpacing() int {
	return s.LineSpacing
}

// SetID sets the value of ID.
func (s *ParagraphStyle) SetID(val int) {
	s.ID = val
}

// SetAlignment sets the value of Alignment.
func (s *ParagraphStyle) SetAlignment(val Alignment) {
	s.Alignment = val
}

// SetLineSpacing sets the value of LineSpacing.
func (s *ParagraphStyle) SetLineSpacing(val int) {
	s.LineSpacing = val
}

// Ref: #/components/schemas/SectionBreak
type SectionBreak struct {
	ID                  int    `json:"id"`
	SectionBreakStyleId OptInt `json:"sectionBreakStyleId"`
}

// GetID returns the value of ID.
func (s *SectionBreak) GetID() int {
	return s.ID
}

// GetSectionBreakStyleId returns the value of SectionBreakStyleId.
func (s *SectionBreak) GetSectionBreakStyleId() OptInt {
	return s.SectionBreakStyleId
}

// SetID sets the value of ID.
func (s *SectionBreak) SetID(val int) {
	s.ID = val
}

// SetSectionBreakStyleId sets the value of SectionBreakStyleId.
func (s *SectionBreak) SetSectionBreakStyleId(val OptInt) {
	s.SectionBreakStyleId = val
}

// Ref: #/components/schemas/Size
type Size struct {
	Height Dimension `json:"height"`
	Width  Dimension `json:"width"`
}

// GetHeight returns the value of Height.
func (s *Size) GetHeight() Dimension {
	return s.Height
}

// GetWidth returns the value of Width.
func (s *Size) GetWidth() Dimension {
	return s.Width
}

// SetHeight sets the value of Height.
func (s *Size) SetHeight(val Dimension) {
	s.Height = val
}

// SetWidth sets the value of Width.
func (s *Size) SetWidth(val Dimension) {
	s.Width = val
}

// Ref: #/components/schemas/StructuralElement
type StructuralElement struct {
	ID      int                      `json:"id"`
	Index   int                      `json:"index"`
	Element StructuralElementElement `json:"element"`
}

// GetID returns the value of ID.
func (s *StructuralElement) GetID() int {
	return s.ID
}

// GetIndex returns the value of Index.
func (s *StructuralElement) GetIndex() int {
	return s.Index
}

// GetElement returns the value of Element.
func (s *StructuralElement) GetElement() StructuralElementElement {
	return s.Element
}

// SetID sets the value of ID.
func (s *StructuralElement) SetID(val int) {
	s.ID = val
}

// SetIndex sets the value of Index.
func (s *StructuralElement) SetIndex(val int) {
	s.Index = val
}

// SetElement sets the value of Element.
func (s *StructuralElement) SetElement(val StructuralElementElement) {
	s.Element = val
}

func (*StructuralElement) createElementRes()           {}
func (*StructuralElement) updateStructuralElementRes() {}

// StructuralElementElement represents sum type.
type StructuralElementElement struct {
	Type         StructuralElementElementType // switch on this field
	Paragraph    Paragraph
	SectionBreak SectionBreak
}

// StructuralElementElementType is oneOf type of StructuralElementElement.
type StructuralElementElementType string

// Possible values for StructuralElementElementType.
const (
	ParagraphStructuralElementElement    StructuralElementElementType = "Paragraph"
	SectionBreakStructuralElementElement StructuralElementElementType = "SectionBreak"
)

// IsParagraph reports whether StructuralElementElement is Paragraph.
func (s StructuralElementElement) IsParagraph() bool {
	return s.Type == ParagraphStructuralElementElement
}

// IsSectionBreak reports whether StructuralElementElement is SectionBreak.
func (s StructuralElementElement) IsSectionBreak() bool {
	return s.Type == SectionBreakStructuralElementElement
}

// SetParagraph sets StructuralElementElement to Paragraph.
func (s *StructuralElementElement) SetParagraph(v Paragraph) {
	s.Type = ParagraphStructuralElementElement
	s.Paragraph = v
}

// GetParagraph returns Paragraph and true boolean if StructuralElementElement is Paragraph.
func (s StructuralElementElement) GetParagraph() (v Paragraph, ok bool) {
	if !s.IsParagraph() {
		return v, false
	}
	return s.Paragraph, true
}

// NewParagraphStructuralElementElement returns new StructuralElementElement from Paragraph.
func NewParagraphStructuralElementElement(v Paragraph) StructuralElementElement {
	var s StructuralElementElement
	s.SetParagraph(v)
	return s
}

// SetSectionBreak sets StructuralElementElement to SectionBreak.
func (s *StructuralElementElement) SetSectionBreak(v SectionBreak) {
	s.Type = SectionBreakStructuralElementElement
	s.SectionBreak = v
}

// GetSectionBreak returns SectionBreak and true boolean if StructuralElementElement is SectionBreak.
func (s StructuralElementElement) GetSectionBreak() (v SectionBreak, ok bool) {
	if !s.IsSectionBreak() {
		return v, false
	}
	return s.SectionBreak, true
}

// NewSectionBreakStructuralElementElement returns new StructuralElementElement from SectionBreak.
func NewSectionBreakStructuralElementElement(v SectionBreak) StructuralElementElement {
	var s StructuralElementElement
	s.SetSectionBreak(v)
	return s
}

// Ref: #/components/schemas/StructuralElementType
type StructuralElementType string

const (
	StructuralElementTypeParagraph    StructuralElementType = "paragraph"
	StructuralElementTypeSectionBreak StructuralElementType = "sectionBreak"
)

// MarshalText implements encoding.TextMarshaler.
func (s StructuralElementType) MarshalText() ([]byte, error) {
	switch s {
	case StructuralElementTypeParagraph:
		return []byte(s), nil
	case StructuralElementTypeSectionBreak:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StructuralElementType) UnmarshalText(data []byte) error {
	switch StructuralElementType(data) {
	case StructuralElementTypeParagraph:
		*s = StructuralElementTypeParagraph
		return nil
	case StructuralElementTypeSectionBreak:
		*s = StructuralElementTypeSectionBreak
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Style
type Style struct {
	ID uuid.UUID `json:"id"`
	// Unique name of style.
	Name           string         `json:"name"`
	ParagraphStyle ParagraphStyle `json:"paragraphStyle"`
	TextStyle      TextStyle      `json:"textStyle"`
}

// GetID returns the value of ID.
func (s *Style) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Style) GetName() string {
	return s.Name
}

// GetParagraphStyle returns the value of ParagraphStyle.
func (s *Style) GetParagraphStyle() ParagraphStyle {
	return s.ParagraphStyle
}

// GetTextStyle returns the value of TextStyle.
func (s *Style) GetTextStyle() TextStyle {
	return s.TextStyle
}

// SetID sets the value of ID.
func (s *Style) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Style) SetName(val string) {
	s.Name = val
}

// SetParagraphStyle sets the value of ParagraphStyle.
func (s *Style) SetParagraphStyle(val ParagraphStyle) {
	s.ParagraphStyle = val
}

// SetTextStyle sets the value of TextStyle.
func (s *Style) SetTextStyle(val TextStyle) {
	s.TextStyle = val
}

func (*Style) createDocumentStyleRes() {}
func (*Style) updateStyleByIdRes()     {}

// Ref: #/components/schemas/TextRun
type TextRun struct {
	ID          int    `json:"id"`
	Content     string `json:"content"`
	TextStyleId int    `json:"textStyleId"`
}

// GetID returns the value of ID.
func (s *TextRun) GetID() int {
	return s.ID
}

// GetContent returns the value of Content.
func (s *TextRun) GetContent() string {
	return s.Content
}

// GetTextStyleId returns the value of TextStyleId.
func (s *TextRun) GetTextStyleId() int {
	return s.TextStyleId
}

// SetID sets the value of ID.
func (s *TextRun) SetID(val int) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *TextRun) SetContent(val string) {
	s.Content = val
}

// SetTextStyleId sets the value of TextStyleId.
func (s *TextRun) SetTextStyleId(val int) {
	s.TextStyleId = val
}

// Ref: #/components/schemas/TextStyle
type TextStyle struct {
	ID              int       `json:"id"`
	FontFamily      string    `json:"fontFamily"`
	FontWeight      int       `json:"fontWeight"`
	FontSize        Dimension `json:"fontSize"`
	Bold            bool      `json:"bold"`
	Underline       bool      `json:"underline"`
	Italic          bool      `json:"italic"`
	BackgroundColor Color     `json:"backgroundColor"`
	ForegroundColor Color     `json:"foregroundColor"`
}

// GetID returns the value of ID.
func (s *TextStyle) GetID() int {
	return s.ID
}

// GetFontFamily returns the value of FontFamily.
func (s *TextStyle) GetFontFamily() string {
	return s.FontFamily
}

// GetFontWeight returns the value of FontWeight.
func (s *TextStyle) GetFontWeight() int {
	return s.FontWeight
}

// GetFontSize returns the value of FontSize.
func (s *TextStyle) GetFontSize() Dimension {
	return s.FontSize
}

// GetBold returns the value of Bold.
func (s *TextStyle) GetBold() bool {
	return s.Bold
}

// GetUnderline returns the value of Underline.
func (s *TextStyle) GetUnderline() bool {
	return s.Underline
}

// GetItalic returns the value of Italic.
func (s *TextStyle) GetItalic() bool {
	return s.Italic
}

// GetBackgroundColor returns the value of BackgroundColor.
func (s *TextStyle) GetBackgroundColor() Color {
	return s.BackgroundColor
}

// GetForegroundColor returns the value of ForegroundColor.
func (s *TextStyle) GetForegroundColor() Color {
	return s.ForegroundColor
}

// SetID sets the value of ID.
func (s *TextStyle) SetID(val int) {
	s.ID = val
}

// SetFontFamily sets the value of FontFamily.
func (s *TextStyle) SetFontFamily(val string) {
	s.FontFamily = val
}

// SetFontWeight sets the value of FontWeight.
func (s *TextStyle) SetFontWeight(val int) {
	s.FontWeight = val
}

// SetFontSize sets the value of FontSize.
func (s *TextStyle) SetFontSize(val Dimension) {
	s.FontSize = val
}

// SetBold sets the value of Bold.
func (s *TextStyle) SetBold(val bool) {
	s.Bold = val
}

// SetUnderline sets the value of Underline.
func (s *TextStyle) SetUnderline(val bool) {
	s.Underline = val
}

// SetItalic sets the value of Italic.
func (s *TextStyle) SetItalic(val bool) {
	s.Italic = val
}

// SetBackgroundColor sets the value of BackgroundColor.
func (s *TextStyle) SetBackgroundColor(val Color) {
	s.BackgroundColor = val
}

// SetForegroundColor sets the value of ForegroundColor.
func (s *TextStyle) SetForegroundColor(val Color) {
	s.ForegroundColor = val
}

// Ref: #/components/schemas/Unit
type Unit string

const (
	UnitPT             Unit = "PT"
	UnitUNITUNSPECIFED Unit = "UNIT_UNSPECIFED"
)

// MarshalText implements encoding.TextMarshaler.
func (s Unit) MarshalText() ([]byte, error) {
	switch s {
	case UnitPT:
		return []byte(s), nil
	case UnitUNITUNSPECIFED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Unit) UnmarshalText(data []byte) error {
	switch Unit(data) {
	case UnitPT:
		*s = UnitPT
		return nil
	case UnitUNITUNSPECIFED:
		*s = UnitUNITUNSPECIFED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateParagraphElement
type UpdateParagraphElement struct {
	Element UpdateParagraphElementElement `json:"element"`
}

// GetElement returns the value of Element.
func (s *UpdateParagraphElement) GetElement() UpdateParagraphElementElement {
	return s.Element
}

// SetElement sets the value of Element.
func (s *UpdateParagraphElement) SetElement(val UpdateParagraphElementElement) {
	s.Element = val
}

// UpdateParagraphElementElement represents sum type.
type UpdateParagraphElementElement struct {
	Type                UpdateParagraphElementElementType // switch on this field
	CreateUpdateTextRun CreateUpdateTextRun
}

// UpdateParagraphElementElementType is oneOf type of UpdateParagraphElementElement.
type UpdateParagraphElementElementType string

// Possible values for UpdateParagraphElementElementType.
const (
	CreateUpdateTextRunUpdateParagraphElementElement UpdateParagraphElementElementType = "CreateUpdateTextRun"
)

// IsCreateUpdateTextRun reports whether UpdateParagraphElementElement is CreateUpdateTextRun.
func (s UpdateParagraphElementElement) IsCreateUpdateTextRun() bool {
	return s.Type == CreateUpdateTextRunUpdateParagraphElementElement
}

// SetCreateUpdateTextRun sets UpdateParagraphElementElement to CreateUpdateTextRun.
func (s *UpdateParagraphElementElement) SetCreateUpdateTextRun(v CreateUpdateTextRun) {
	s.Type = CreateUpdateTextRunUpdateParagraphElementElement
	s.CreateUpdateTextRun = v
}

// GetCreateUpdateTextRun returns CreateUpdateTextRun and true boolean if UpdateParagraphElementElement is CreateUpdateTextRun.
func (s UpdateParagraphElementElement) GetCreateUpdateTextRun() (v CreateUpdateTextRun, ok bool) {
	if !s.IsCreateUpdateTextRun() {
		return v, false
	}
	return s.CreateUpdateTextRun, true
}

// NewCreateUpdateTextRunUpdateParagraphElementElement returns new UpdateParagraphElementElement from CreateUpdateTextRun.
func NewCreateUpdateTextRunUpdateParagraphElementElement(v CreateUpdateTextRun) UpdateParagraphElementElement {
	var s UpdateParagraphElementElement
	s.SetCreateUpdateTextRun(v)
	return s
}

// Ref: #/components/schemas/UpdateStyleOfStructuralElement
type UpdateStyleOfStructuralElement struct {
	Element UpdateStyleOfStructuralElementElement `json:"element"`
}

// GetElement returns the value of Element.
func (s *UpdateStyleOfStructuralElement) GetElement() UpdateStyleOfStructuralElementElement {
	return s.Element
}

// SetElement sets the value of Element.
func (s *UpdateStyleOfStructuralElement) SetElement(val UpdateStyleOfStructuralElementElement) {
	s.Element = val
}

// UpdateStyleOfStructuralElementElement represents sum type.
type UpdateStyleOfStructuralElementElement struct {
	Type                     UpdateStyleOfStructuralElementElementType // switch on this field
	CreateUpdateParagraph    CreateUpdateParagraph
	CreateUpdateSectionBreak CreateUpdateSectionBreak
}

// UpdateStyleOfStructuralElementElementType is oneOf type of UpdateStyleOfStructuralElementElement.
type UpdateStyleOfStructuralElementElementType string

// Possible values for UpdateStyleOfStructuralElementElementType.
const (
	CreateUpdateParagraphUpdateStyleOfStructuralElementElement    UpdateStyleOfStructuralElementElementType = "CreateUpdateParagraph"
	CreateUpdateSectionBreakUpdateStyleOfStructuralElementElement UpdateStyleOfStructuralElementElementType = "CreateUpdateSectionBreak"
)

// IsCreateUpdateParagraph reports whether UpdateStyleOfStructuralElementElement is CreateUpdateParagraph.
func (s UpdateStyleOfStructuralElementElement) IsCreateUpdateParagraph() bool {
	return s.Type == CreateUpdateParagraphUpdateStyleOfStructuralElementElement
}

// IsCreateUpdateSectionBreak reports whether UpdateStyleOfStructuralElementElement is CreateUpdateSectionBreak.
func (s UpdateStyleOfStructuralElementElement) IsCreateUpdateSectionBreak() bool {
	return s.Type == CreateUpdateSectionBreakUpdateStyleOfStructuralElementElement
}

// SetCreateUpdateParagraph sets UpdateStyleOfStructuralElementElement to CreateUpdateParagraph.
func (s *UpdateStyleOfStructuralElementElement) SetCreateUpdateParagraph(v CreateUpdateParagraph) {
	s.Type = CreateUpdateParagraphUpdateStyleOfStructuralElementElement
	s.CreateUpdateParagraph = v
}

// GetCreateUpdateParagraph returns CreateUpdateParagraph and true boolean if UpdateStyleOfStructuralElementElement is CreateUpdateParagraph.
func (s UpdateStyleOfStructuralElementElement) GetCreateUpdateParagraph() (v CreateUpdateParagraph, ok bool) {
	if !s.IsCreateUpdateParagraph() {
		return v, false
	}
	return s.CreateUpdateParagraph, true
}

// NewCreateUpdateParagraphUpdateStyleOfStructuralElementElement returns new UpdateStyleOfStructuralElementElement from CreateUpdateParagraph.
func NewCreateUpdateParagraphUpdateStyleOfStructuralElementElement(v CreateUpdateParagraph) UpdateStyleOfStructuralElementElement {
	var s UpdateStyleOfStructuralElementElement
	s.SetCreateUpdateParagraph(v)
	return s
}

// SetCreateUpdateSectionBreak sets UpdateStyleOfStructuralElementElement to CreateUpdateSectionBreak.
func (s *UpdateStyleOfStructuralElementElement) SetCreateUpdateSectionBreak(v CreateUpdateSectionBreak) {
	s.Type = CreateUpdateSectionBreakUpdateStyleOfStructuralElementElement
	s.CreateUpdateSectionBreak = v
}

// GetCreateUpdateSectionBreak returns CreateUpdateSectionBreak and true boolean if UpdateStyleOfStructuralElementElement is CreateUpdateSectionBreak.
func (s UpdateStyleOfStructuralElementElement) GetCreateUpdateSectionBreak() (v CreateUpdateSectionBreak, ok bool) {
	if !s.IsCreateUpdateSectionBreak() {
		return v, false
	}
	return s.CreateUpdateSectionBreak, true
}

// NewCreateUpdateSectionBreakUpdateStyleOfStructuralElementElement returns new UpdateStyleOfStructuralElementElement from CreateUpdateSectionBreak.
func NewCreateUpdateSectionBreakUpdateStyleOfStructuralElementElement(v CreateUpdateSectionBreak) UpdateStyleOfStructuralElementElement {
	var s UpdateStyleOfStructuralElementElement
	s.SetCreateUpdateSectionBreak(v)
	return s
}
