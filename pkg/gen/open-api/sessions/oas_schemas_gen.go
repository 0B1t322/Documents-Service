// Code generated by ogen, DO NOT EDIT.

package sessions

import (
	"github.com/google/uuid"
)

// Ref: #/components/schemas/DeleteText
type DeleteText struct {
	StructuralElementIndex int    `json:"structuralElementIndex"`
	ParagraphElementIndex  int    `json:"paragraphElementIndex"`
	DeleteAfter            int    `json:"deleteAfter"`
	Content                string `json:"content"`
}

// GetStructuralElementIndex returns the value of StructuralElementIndex.
func (s *DeleteText) GetStructuralElementIndex() int {
	return s.StructuralElementIndex
}

// GetParagraphElementIndex returns the value of ParagraphElementIndex.
func (s *DeleteText) GetParagraphElementIndex() int {
	return s.ParagraphElementIndex
}

// GetDeleteAfter returns the value of DeleteAfter.
func (s *DeleteText) GetDeleteAfter() int {
	return s.DeleteAfter
}

// GetContent returns the value of Content.
func (s *DeleteText) GetContent() string {
	return s.Content
}

// SetStructuralElementIndex sets the value of StructuralElementIndex.
func (s *DeleteText) SetStructuralElementIndex(val int) {
	s.StructuralElementIndex = val
}

// SetParagraphElementIndex sets the value of ParagraphElementIndex.
func (s *DeleteText) SetParagraphElementIndex(val int) {
	s.ParagraphElementIndex = val
}

// SetDeleteAfter sets the value of DeleteAfter.
func (s *DeleteText) SetDeleteAfter(val int) {
	s.DeleteAfter = val
}

// SetContent sets the value of Content.
func (s *DeleteText) SetContent(val string) {
	s.Content = val
}

// Ref: #/components/schemas/Document
type Document struct {
	ID         uuid.UUID `json:"id"`
	RevisionId int       `json:"revisionId"`
}

// GetID returns the value of ID.
func (s *Document) GetID() uuid.UUID {
	return s.ID
}

// GetRevisionId returns the value of RevisionId.
func (s *Document) GetRevisionId() int {
	return s.RevisionId
}

// SetID sets the value of ID.
func (s *Document) SetID(val uuid.UUID) {
	s.ID = val
}

// SetRevisionId sets the value of RevisionId.
func (s *Document) SetRevisionId(val int) {
	s.RevisionId = val
}

func (*Document) getDocumentRevisionIdRes() {}

// Ref: #/components/schemas/DocumentOperation
// DocumentOperation represents sum type.
type DocumentOperation struct {
	Type       DocumentOperationType // switch on this field
	InsertText InsertText
	DeleteText DeleteText
}

// DocumentOperationType is oneOf type of DocumentOperation.
type DocumentOperationType string

// Possible values for DocumentOperationType.
const (
	InsertTextDocumentOperation DocumentOperationType = "InsertText"
	DeleteTextDocumentOperation DocumentOperationType = "DeleteText"
)

// IsInsertText reports whether DocumentOperation is InsertText.
func (s DocumentOperation) IsInsertText() bool { return s.Type == InsertTextDocumentOperation }

// IsDeleteText reports whether DocumentOperation is DeleteText.
func (s DocumentOperation) IsDeleteText() bool { return s.Type == DeleteTextDocumentOperation }

// SetInsertText sets DocumentOperation to InsertText.
func (s *DocumentOperation) SetInsertText(v InsertText) {
	s.Type = InsertTextDocumentOperation
	s.InsertText = v
}

// GetInsertText returns InsertText and true boolean if DocumentOperation is InsertText.
func (s DocumentOperation) GetInsertText() (v InsertText, ok bool) {
	if !s.IsInsertText() {
		return v, false
	}
	return s.InsertText, true
}

// NewInsertTextDocumentOperation returns new DocumentOperation from InsertText.
func NewInsertTextDocumentOperation(v InsertText) DocumentOperation {
	var s DocumentOperation
	s.SetInsertText(v)
	return s
}

// SetDeleteText sets DocumentOperation to DeleteText.
func (s *DocumentOperation) SetDeleteText(v DeleteText) {
	s.Type = DeleteTextDocumentOperation
	s.DeleteText = v
}

// GetDeleteText returns DeleteText and true boolean if DocumentOperation is DeleteText.
func (s DocumentOperation) GetDeleteText() (v DeleteText, ok bool) {
	if !s.IsDeleteText() {
		return v, false
	}
	return s.DeleteText, true
}

// NewDeleteTextDocumentOperation returns new DocumentOperation from DeleteText.
func NewDeleteTextDocumentOperation(v DeleteText) DocumentOperation {
	var s DocumentOperation
	s.SetDeleteText(v)
	return s
}

// Ref: #/components/schemas/DocumentRevision
type DocumentRevision struct {
	RevisionId int                 `json:"revisionId"`
	Commands   []DocumentOperation `json:"commands"`
}

// GetRevisionId returns the value of RevisionId.
func (s *DocumentRevision) GetRevisionId() int {
	return s.RevisionId
}

// GetCommands returns the value of Commands.
func (s *DocumentRevision) GetCommands() []DocumentOperation {
	return s.Commands
}

// SetRevisionId sets the value of RevisionId.
func (s *DocumentRevision) SetRevisionId(val int) {
	s.RevisionId = val
}

// SetCommands sets the value of Commands.
func (s *DocumentRevision) SetCommands(val []DocumentOperation) {
	s.Commands = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// HTTP status code.
	Status int `json:"status"`
	// String message.
	Message string `json:"message"`
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() int {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val int) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) getDocumentHistoryRes()      {}
func (*ErrorStatusCode) getDocumentRevisionIdRes()   {}
func (*ErrorStatusCode) pushOperationToDocumentRes() {}
func (*ErrorStatusCode) syncDocumentsByIdRes()       {}

type GetDocumentHistoryOKApplicationJSON []DocumentRevision

func (*GetDocumentHistoryOKApplicationJSON) getDocumentHistoryRes() {}

// Ref: #/components/schemas/InsertText
type InsertText struct {
	StructuralElementIndex int    `json:"structuralElementIndex"`
	ParagraphElementIndex  int    `json:"paragraphElementIndex"`
	InsertBefore           int    `json:"insertBefore"`
	Content                string `json:"content"`
}

// GetStructuralElementIndex returns the value of StructuralElementIndex.
func (s *InsertText) GetStructuralElementIndex() int {
	return s.StructuralElementIndex
}

// GetParagraphElementIndex returns the value of ParagraphElementIndex.
func (s *InsertText) GetParagraphElementIndex() int {
	return s.ParagraphElementIndex
}

// GetInsertBefore returns the value of InsertBefore.
func (s *InsertText) GetInsertBefore() int {
	return s.InsertBefore
}

// GetContent returns the value of Content.
func (s *InsertText) GetContent() string {
	return s.Content
}

// SetStructuralElementIndex sets the value of StructuralElementIndex.
func (s *InsertText) SetStructuralElementIndex(val int) {
	s.StructuralElementIndex = val
}

// SetParagraphElementIndex sets the value of ParagraphElementIndex.
func (s *InsertText) SetParagraphElementIndex(val int) {
	s.ParagraphElementIndex = val
}

// SetInsertBefore sets the value of InsertBefore.
func (s *InsertText) SetInsertBefore(val int) {
	s.InsertBefore = val
}

// SetContent sets the value of Content.
func (s *InsertText) SetContent(val string) {
	s.Content = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PushOperationToDocumentNoContent is response for PushOperationToDocument operation.
type PushOperationToDocumentNoContent struct{}

func (*PushOperationToDocumentNoContent) pushOperationToDocumentRes() {}

// Ref: #/components/schemas/SaveDocumentRequest
type SaveDocumentRequest struct {
	Commands []DocumentOperation `json:"commands"`
}

// GetCommands returns the value of Commands.
func (s *SaveDocumentRequest) GetCommands() []DocumentOperation {
	return s.Commands
}

// SetCommands sets the value of Commands.
func (s *SaveDocumentRequest) SetCommands(val []DocumentOperation) {
	s.Commands = val
}

type SyncDocumentsByIdOKApplicationJSON []DocumentOperation

func (*SyncDocumentsByIdOKApplicationJSON) syncDocumentsByIdRes() {}
